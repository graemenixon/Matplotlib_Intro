# import Matplotlib and give it an alias
import matplotlib.pyplot as plt

# Create a drawing figure and draw a scatter plot using scatter(x axis, y axis)
plt.scatter(x axis, y axis)
# show the above plot:
plt.show()

# Best practice: convert your df into series through df = data["Column"] so that you can plot variables

# For line plots, use:
plt.plot(x axis, y axis)
plt.show()

# For bar charts, use:
plt.bar(x axis, y axis)
plt.show()

# Horizontal bar charts:
plt.barh(x axis, y axis)
plt.show()

# Note: if printing an axis and you need multiple "buckets" or a range, you can pass in a tuple.
# Example: range(12) will return (0,12). Then that tuple can be used to create buckets from 1 - 12
# If you use barh, remember that your "y axis" value will be plotted against the x axis (inverse bar)

# The following code uses a pivot table to summarize values (area) against another variable (time):
area_by_month = forest_fires.pivot_table(index="month", values="area", aggfunc=numpy.mean)
area_by_day = forest_fires.pivot_table(index="day", values="area", aggfunc=numpy.mean)

# Then it plots it, by taking the number of datapoints (x axis) and plotting it against the number of time units (days / months)
## That is arrived at by looking at the len of the variable (which is a list), and then uses "range" to start from 0 (default)
## and go up to the len of the variable
plt.barh(area_by_month, range(len(area_by_month)))
plt.show()

plt.barh(area_by_day, range(len(area_by_day)))
plt.show()


# Adding labels. Make sure these go before you type plt.show():

plt.scatter(wind, area)
plt.title("Wind speed vs fire area") // adds title
plt.xlabel("Wind speed when fire started") // adds x axis label
plt.ylabel("Area consumed by fire") // adds y axis label
plt.show()

# These plots are pretty ugly. We can change this using plt.style.use():
plt.style.use('ggplot')

# Creating a histogram of numeric values in specific columns (use hist):

import matplotlib.pyplot as plt

columns = ['Median','Sample_size']
recent_grads.hist(column=columns)

# The output is smushed. This modifcation stacks the graphs so they aren't side by side

recent_grads.hist(column=columns, layout=(2,1), grid=False)

# By default, hist() uses hits(bins = 10), but you can change that (below makes 

recent_grads.hist(bins = 50, column = "Sample_size")

# Box plots: represent quartiles and median (the line in the middle of the box)
# Generates box plots for college majors. In both, they group by "major category" where the values are given in "sample size"
# and total.

recent_grads[['Sample_size', 'Major_category']].boxplot(by='Major_category')
plt.xticks(rotation=90)

recent_grads[['Total', 'Major_category']].boxplot(by='Major_category')
# Rotation is for the x axis labels
plt.xticks(rotation=90)

# Multiple plots on a single plot

# Plot Unemployment_rate on x-axis, Median salary on y-axis, in red
plt.scatter(recent_grads['Unemployment_rate'], recent_grads['Median'], color='red')
# Plot ShareWomen (Female % in major) on x-axis, Median salary on y-axis, in blue
plt.scatter(recent_grads['ShareWomen'], recent_grads['Median'], color='blue')
# plt.show() will take all the graphs above. Because they share a Y axis, they are plotted together.
plt.show()


# Plot Unemployment_rate on x-axis, Median salary on y-axis, in red
plt.scatter(recent_grads['Unemployment_rate'], recent_grads['Median'], color='red')
plot.show()
# Plot ShareWomen (Female % in major) on x-axis, Median salary on y-axis, in blue
plt.scatter(recent_grads['ShareWomen'], recent_grads['Median'], color='blue')
plt.show()


